{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","bull","cow","useState","guess","setGuess","guessArr","toString","split","RandomizedNum","setRandomizedNum","useEffect","validateRandomNum","randNum","Math","floor","random","checkUnique","num","test","className","onSubmit","e","preventDefault","splitRandNum","i","length","includes","$","prepend","pattern","type","value","maxLength","onChange","target","minLength","required","name","id","cols","rows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQA0EeA,MAtEf,WACI,IAAIC,EAAO,EACPC,EAAM,EACV,EAAwBC,mBAAS,IAAjC,mBAAKC,EAAL,KAAYC,EAAZ,KACMC,EAAWF,EAAMG,WAAWC,MAAM,IACxC,EAA0CL,mBAAS,IAAnD,mBAAOM,EAAP,KAAsBC,EAAtB,KAGAC,qBAAU,WACND,EAAiBE,OAClB,IAEH,IAAMA,EAAqB,SAArBA,IACF,IAAMC,EAAUC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAkB,KAClD,OAAIC,EAAYJ,GACLA,EAAQN,WACLK,GAEZK,EAAc,SAACC,GACjB,OAAQ,WAAWC,KAAKD,IAsBhC,OACA,sBAAKE,UAAU,YAAf,UACI,oBAAIA,UAAU,SAAd,0BACA,gCACA,gEAAwCX,EACxC,uBAAMY,SAxBU,SAACC,GACbA,EAAEC,iBAEF,IADA,IAAMC,EAAef,EAAcD,MAAM,IAChCiB,EAAI,EAAGA,EAAInB,EAASoB,OAAQD,IAC9BnB,EAASmB,KAAOD,EAAaC,IAAMnB,EAASqB,SAASH,EAAaC,IAEjExB,IACOK,EAASqB,SAASH,EAAaC,KACtCvB,IAGM,IAAPD,GACC2B,IAAE,gBAAgBC,QAAlB,UAA6BzB,EAA7B,sBAAgDH,EAAhD,qBAAiEC,EAAjE,mBACI0B,IAAE,gBAAgBC,QAAlB,UAA6BzB,EAA7B,sBAAgDH,EAAhD,qBAAiEC,EAAjE,UACJG,EAAS,KAUrB,UACI,uBACAe,UAAU,SACVU,QAAQ,SACRC,KAAK,OACLC,MAAO5B,EACP6B,UAAY,IACZC,SAAU,SAACZ,GAAD,OAAOjB,EAAUiB,EAAEa,OAAOH,QACpCI,UAAY,IACZC,UAAQ,IAER,uBACAjB,UAAU,SACVW,KAAK,SACLC,MAAM,gBAKV,0BAAUM,KAAK,cAAeC,GAAG,cAAcC,KAAK,KAAKC,KAAK,WCzDnDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.21d1fd32.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from \"react\"\nimport $ from 'jquery'\n\nfunction App() {\n    let bull = 0\n    let cow = 0\n    let [guess, setGuess] = useState('')\n    const guessArr = guess.toString().split('')\n    const [RandomizedNum, setRandomizedNum] = useState('')\n\n    \n    useEffect(() => {\n        setRandomizedNum(validateRandomNum ())\n    }, [])\n\n    const validateRandomNum  = () => {\n        const randNum = Math.floor(Math.random() * 9000 + 1000)\n        if (checkUnique(randNum)){\n            return randNum.toString()\n        } else return validateRandomNum\n    }\n    const checkUnique = (num) => {\n        return !/(.).*?\\1/.test(num)\n    }\n\n    const toGuess = (e) => {\n        e.preventDefault()\n        const splitRandNum = RandomizedNum.split('')\n        for (let i = 0; i < guessArr.length; i++){     \n            if(guessArr[i] === splitRandNum[i] && guessArr.includes(splitRandNum[i])\n            ){\n                bull++\n            } else if (guessArr.includes(splitRandNum[i])){\n                cow++\n            }\n        }\n            if(bull===4){\n                $('#historyLogs').prepend(`${guess}\\t\\tbulls =${bull}\\t\\tcows =${cow} YOU WIN! \\r\\n`)\n                } { $('#historyLogs').prepend(`${guess}\\t\\tbulls =${bull}\\t\\tcows =${cow} \\r\\n`) \n                setGuess('')\n                }\n            \n    } \n\nreturn (\n<div className=\"container\">\n    <h1 className=\"Header\">Bulls & Cows</h1>\n    <div>\n    <h3>Try guessing the secret number</h3>{RandomizedNum}\n    <form onSubmit={toGuess}>\n        <input \n        className='number'\n        pattern=\"[0-9]+\"\n        type=\"text\"\n        value={guess}\n        maxLength = '4'\n        onChange={(e) => setGuess (e.target.value)}\n        minLength = '4'\n        required\n        />\n        <input \n        className='submit'\n        type=\"submit\" \n        value='Guess'\n        \n        />\n    </form>\n    </div>\n    <textarea name=\"historyLogs\"  id=\"historyLogs\" cols=\"15\" rows=\"15\" ></textarea>\n</div>\n);\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}